#!/usr/bin/env python3

"""Tools for maintaining Grafana datasources & application plugins."""

import argparse
import json
import sys
import time
from urllib.parse import ParseResult, urlparse

import attr
import requests


@attr.s
class BasicAuthCredentials(object):
    username = attr.ib()
    password = attr.ib()

    def to_json_dict(self):
        return {
            'basicAuth': True,
            'basicAuthUser': self.username,
            'basicAuthPassword': self.password
        }


@attr.s
class DataSource(object):
    """A data source for Grafana."""

    name = attr.ib()
    type = attr.ib()
    url = attr.ib()
    access = attr.ib()
    credentials = attr.ib()

    def to_json_dict(self):
        data = {
            'name': self.name,
            'type': self.type,
            'url': self.url,
            'access': self.access,
        }
        if self.credentials:
            data.update(self.credentials.to_json_dict())
        return data


@attr.s
class App(object):
    '''An App plugin for Grafana

    Grafana application configuration logic is entirely client side, therefore
    this util cannot fill UI fields without emulating a full browser.
    Therefore this must be provided with the right data to be sent to the
    server to emulate the output of the client-side application.
    '''

    id = attr.ib()
    json_data = attr.ib()
    secure_json_data = attr.ib()

    def to_json_dict(self):
        data = {
            'id': self.id,
            'enabled': True,
            'pinned': True,
            'json_data': self.json_data,
        }
        if self.secure_json_data is not None:
            data['secure_json_data'] = self.secure_json_data
        return data


@attr.s
class GrafanaAPI(object):
    """HTTP client for Grafana's API."""

    base_url = attr.ib()
    credentials = attr.ib()

    def update_datasource(self, data_source):
        return requests.post(
            '/'.join([self.base_url, 'datasources']),
            json=data_source.to_json_dict(),
            auth=(self.credentials.username, self.credentials.password)
        )

    def update_app(self, app):
        return requests.post(
            '/'.join([self.base_url, 'plugins', app.id, 'settings']),
            json=app.to_json_dict(),
            auth=(self.credentials.username, self.credentials.password)
        )


def cmd_datasource(grafana_api, opts):
    datasource_url, datasource_creds = _split_creds(opts.data_source_url)
    datasource = DataSource(
        name=opts.name, type=opts.type, access=opts.access,
        url=datasource_url, credentials=datasource_creds,
    )

    grafana_api.update_datasource(datasource)


def cmd_app(grafana_api, opts):
    json_data = json.loads(opts.json_data)
    if opts.secure_json_data is not None:
        secure_json_data = json.loads(opts.secure_json_data)
    else:
        secure_json_data = None

    app = App(
        id=opts.id, json_data=json_data, secure_json_data=secure_json_data)

    grafana_api.update_app(app)


class DefaultSubcommandArgParse(argparse.ArgumentParser):
    _default_subparser = None

    def set_default_subparser(self, name):
        self._default_subparser = name

    def parse_args(self, args=None, namespace=None):
        # Find the subparser for our subcommand
        subparser_action = None
        for action in self._subparsers._actions:
            if isinstance(action, argparse._SubParsersAction):
                subparser_action = action

        default = self._default_subparser
        if not default or not subparser_action:
            return super().parse_args(args, namespace)

        if set(args).intersection(subparser_action.choices.keys()):
            # If a subcommand was specified, we don't need to do anything
            return super().parse_args(args, namespace)

        # Otherwise, we need to inject the default command between the global
        # args and the command args
        global_options = {
            option: action
            for action in self._subparsers._actions
            for option in action.option_strings
        }

        # Ensure that global options come before command options
        remaining = tuple(args)
        global_args = ()
        cmd_args = ()
        while remaining:
            arg, remaining = remaining[0], remaining[1:]
            if arg in global_options:
                global_args += (arg, )
                nargs = global_options[arg].nargs
                if nargs:
                    global_args += tuple(remaining[0:nargs])
                    remaining = remaining[nargs:]

            elif any(arg.startswith(opt + '=')
                     for opt in global_options.keys()):
                global_args += (arg, )
            else:
                cmd_args += (arg, )

        return super().parse_args(
            list(global_args + (default,) + cmd_args), namespace)


def make_parser():
    parser = DefaultSubcommandArgParse(prog='gfdatasource')
    parser.add_argument(
        '--grafana-url', type=urlparse, required=True,
        help="URL of Grafana API",
    )
    parser.add_argument(
        '--update-interval', type=int, default=10,
        help="How frequently to update Grafana, in seconds",
    )
    subparsers = parser.add_subparsers(dest='cmd', help='Functions')

    ds_parser = subparsers.add_parser('datasource')
    ds_parser.add_argument(
        '--data-source-url', type=urlparse, required=True,
        help="URL of data source",
    )
    ds_parser.add_argument(
        '--access', type=str, default='proxy',
        help="Type of access used by Grafana to the data source",
    )
    ds_parser.add_argument(
        '--type', type=str, default='prometheus',
        help="The type of data source",
    )
    ds_parser.add_argument(
        '--name', type=str, default='Prometheus',
        help="The name of the data source",
    )

    app_parser = subparsers.add_parser('app')
    app_parser.add_argument(
        '--id', type=str, required=True, help="The app plugin ID",
    )
    app_parser.add_argument(
        '--json-data', type=str, default='{}',
        help="JSON data ",
    )
    app_parser.add_argument(
        '--secure-json-data', type=str, default=None,
        help="JSON data ",
    )

    # For backwards compatibility
    parser.set_default_subparser('datasource')

    return parser


def _split_creds(url):
    creds = BasicAuthCredentials(url.username, url.password)
    netloc = url.netloc.split('@')[1] if '@' in url.netloc else url.netloc
    url = ParseResult(
        scheme=url.scheme,
        netloc=netloc,
        path=url.path,
        params=url.params,
        query=url.query,
        fragment=url.fragment,
    )
    return url.geturl(), creds


_cmds = {
    'datasource': cmd_datasource,
    'app': cmd_app,
}


def main():
    parser = make_parser()
    opts = parser.parse_args(sys.argv[1:])
    grafana_url, grafana_creds = _split_creds(opts.grafana_url)
    grafana_api = GrafanaAPI(base_url=grafana_url, credentials=grafana_creds)

    try:
        cmd_func = _cmds[opts.cmd]
    except KeyError:
        print('Unknown command', opts.cmd)
        sys.exit(1)

    while True:
        cmd_func(grafana_api, opts)
        time.sleep(opts.update_interval)


if __name__ == '__main__':
    main()
